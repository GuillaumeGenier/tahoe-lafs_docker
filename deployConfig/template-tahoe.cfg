#This file is a template for the confguration of a Tahoe-LAFS node.
#It will be provisionned by the deploy scripts from the value in the *.env config files.

[node]
nickname = ${TAHOE_NICK}
#Port of the node's webserver. The webserver is disabled if not set.
web.port = ${THAOE_WEB_PORT}
web.static = ${TAHOE_DIR_WEBSTATIC}
#The "tub" is the server component listening for the communication from the nodes on the grid.
#The tub.port controls the port and protocol used by the node to listen to the nodes on the grid.
#The tub.location controls the port and protocol shared to the grid introducers.
#If one is disabled, the other must be also disabled. This causes a client-only node.
tub.port = ${TAHOE_TUB_ENDPOINTS}
tub.location = ${TAHOE_TUB_LOCATIONS}
#Furl of a log gatherer node.
log_gatherer.furl = ${TAHOE_LOG_GATHERER_FURL}
#The timeout is in seconds, default of 240 (4 minutes).
timeout.disconnect = ${TAHOE_CONNECTIONS_TIMEOUT}
tempdir = ${TAHOE_TEMP_DATADIR}
#If this is set to false, stop and warns if the node would indicates it's IP from the present configuration file.
reveal-IP-address = ${TAHOE_IP_VISIBILITY}

[connections]
#Set the connection hints for the tcp handlers.
#Can be set to disabled, i2p, tcp or tor.
tcp = tcp

[client]
#Furl of an helper node for faster upload and offloading of ressources.
helper.furl = ${THAOE_HELPER_FURL}
#Share count of a file needed to restore it. Default : 3
shares.needed = ${TAHOE_SHARE_NEEDED}
#Share count of a file stored in the grid. Default : 10
shares.total = ${TAHOE_SHARE_TOTAL}
#Number of distinct hosts in the grid successfully distribute shares on the grid. Default: 7
shares.happy = ${TAHOE_SHARE_HAPPY}
mutable.format = mdmf
#Specifies a list of hosts to considers first in the grid when uploading file shares.
peers.preferred = ${TAHOE_PRIORITY_PEERS}

[helper]
#Define if the node is an helper node on the grid.
enabled = ${TAHOE_IS_HELPER_NODE}

[storage]
enabled = ${TAHOE_IS_STORAGE_ENABLED}
storage_dir = "/storage"
reserved_space = ${TAHOE_RESERVED_DISK_SPACE}
readonly = False
expire.enabled = ${TAHOE_GARBAGE_IS_ENABLED}
#Two possible modes : "age" or "cutoff-date"
expire.mode = age
#Override the lease time of 31 days for the garbage collection system.
expire.override_lease_duration = ${TAHOE_GARBAGE_LEASE_DURATION}
#Only garbage-collect immutable files if this is True. Default : True
expire.immutable = ${TAHOE_GARBAGE_AFFECT_IMMUTABLE}
#Only garbage-collect mutable files if this is True. Default : True
expire.mutable = ${TAHOE_GARBAGE_AFFECT_MUTABLE}

#In the "cutoff-date" mode, garbage collect the files before this (AAAA-MM-DD , UTC)).
#expire.cutoff_date = ${TAHOE_GARBAGE_CUTOFF_DATE}

#If this setting is false, a storage plugin is needed
anonymous = True
#plugins = (string, optional)

#Controls the handling of tor enpoints. This needs a container that supports tor.
#[tor]
#enabled = ${TAHOE_TOR_IS_ENABLED}
#socks.port = ${TAHOE_TOR_SOCKS}
#control.port = ${TAHOE_TOR_PORT}
#launch = ${TAHOE_TOR_USE_PRIVATE_INSTANCE}
#tor.executable = ${TAHOE_TOR_EXECUTABLE}

#Controls the handling of i2p enpoints. This needs a container that supports i2p.
#[i2p]
#enabled = ${TAHOE_I2P_IS_ENABLED}
#sam.port = ${TAHOE_I2P_SAM_PORT}
#launch = ${TAHOE_I2P_USE_PRIVATE_INSTANCE}
#i2p.configdir = ${TAHOE_I2P_CONFIG_FILE}
#i2p.executable = ${TAHOE_I2P_EXECUTABLE}